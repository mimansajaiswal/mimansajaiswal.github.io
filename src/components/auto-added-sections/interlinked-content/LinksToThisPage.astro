---
import type { Block, Post } from "@/lib/interfaces";
import NBlocksPopover from "@/components/popover/NBlocksPopover.astro";
import { getInterlinkedContentLink } from "@/lib/blog-helpers";

import { getSymbolForLinkedContent } from "@/utils";

interface Props {
	post: Post;
	allInterlinkedContentToPage: { entryId: string; block: Block }[];
}
const { post, allInterlinkedContentToPage } = Astro.props;
const groupedInterlinkedContent = allInterlinkedContentToPage
	? allInterlinkedContentToPage.reduce((acc, { entryId, block }) => {
			acc[entryId] = acc[entryId] || [];
			acc[entryId].push(block);
			return acc;
		}, {})
	: null;

const entryIdLinksEntry = {};
const blockIdLinks = {};

if (groupedInterlinkedContent) {
	for (const entryId of Object.keys(groupedInterlinkedContent)) {
		entryIdLinksEntry[entryId] = await getInterlinkedContentLink(post.PageId, entryId);
		for (const block of groupedInterlinkedContent[entryId]) {
			const result = await getInterlinkedContentLink(post.PageId, entryId, block);
			blockIdLinks[block.Id] = result[0];
		}
	}
}
---

{
	groupedInterlinkedContent && Object.keys(groupedInterlinkedContent).length > 0 && (
		<>
			<div id="autogenerated-links-to-this-page">
				<span class="font-semibold">Pages That Mention This Page</span>
				{Object.entries(groupedInterlinkedContent).map(([entryId, blocks]) => (
					<div class="ml-2">
						<div class="inline-block">
							<a href={entryIdLinksEntry[entryId][0]} class="site-page-link text-link">
								{entryIdLinksEntry[entryId][1].Title}
							</a>
							{" at "}

							{blocks.map((block, index) => (
								<NBlocksPopover
									block={block}
									linkedTo={blockIdLinks[block.Id]}
									popoverSpanText={`[${getSymbolForLinkedContent(index)}]`}
									popoverTitle={entryIdLinksEntry[entryId][1].Title}
									isInterlinkedBack={true}
								/>
							))}
						</div>
					</div>
				))}
			</div>
			<br />
		</>
	)
}
