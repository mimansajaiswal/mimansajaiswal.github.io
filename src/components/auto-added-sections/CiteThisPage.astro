---
import type { Post } from "@/lib/interfaces";
import { siteInfo } from "@/siteInfo";
import { getPostLink } from "@/lib/blog-helpers";
import { MENU_PAGES_COLLECTION } from "@/constants";
import Icon from "@/components/Icon.astro";

export interface Props {
	post: Post;
}

const { post } = Astro.props;

// Extract year and month from post date
const postDate = new Date(post.Date);
const year = postDate.getFullYear();
const monthNames = [
	"Jan",
	"Feb",
	"Mar",
	"Apr",
	"May",
	"Jun",
	"Jul",
	"Aug",
	"Sep",
	"Oct",
	"Nov",
	"Dec",
];
const month = monthNames[postDate.getMonth()];

// Generate citation key in format: lastnameyearfirstNofslug (e.g., "yan2024aligneval")
const getLastname = (name: string): string => {
	if (!name || name === "Unknown Author") return "unknown";
	const parts = name.trim().split(/\s+/);
	return parts[parts.length - 1].toLowerCase();
};

const lastname = getLastname(siteInfo.author || "Unknown Author");
const slugClean = post.Slug.replace(/[^a-zA-Z0-9]/g, "").toLowerCase();
const slugShort = slugClean.substring(0, Math.min(15, slugClean.length)); // Use first 15 chars max
const citationKey = `${lastname}${year}${slugShort}`;

// Build full URL using Astro.site and getPostLink
// Astro.site is the canonical site URL from astro.config
const isPage = post.Collection === MENU_PAGES_COLLECTION;
const postPath = getPostLink(post.Slug, isPage);
const fullUrl = Astro.site ? new URL(postPath, Astro.site).toString() : postPath;

// Extract journal name from site URL (e.g., "eugeneyan.com" from "https://eugeneyan.com")
const journal = Astro.site ? new URL(Astro.site).hostname : "unknown";

// Format author name for BibTeX (Lastname, Firstname Middlename)
// Input: "Firstname Middlename Lastname" or "Firstname Lastname"
// Output: "Lastname, Firstname Middlename" or "Lastname, Firstname"
const formatAuthorName = (name: string): string => {
	if (!name || name === "Unknown Author") return "Unknown Author";

	const parts = name.trim().split(/\s+/);
	if (parts.length === 1) {
		// Single name, just return as-is
		return parts[0];
	} else if (parts.length === 2) {
		// Firstname Lastname -> Lastname, Firstname
		return `${parts[1]}, ${parts[0]}`;
	} else {
		// Firstname Middlename(s) Lastname -> Lastname, Firstname Middlename(s)
		const lastname = parts[parts.length - 1];
		const firstAndMiddle = parts.slice(0, -1).join(" ");
		return `${lastname}, ${firstAndMiddle}`;
	}
};

const authorFormatted = formatAuthorName(siteInfo.author || "Unknown Author");

// Create BibTeX entry in @article format
const bibtexEntry = `@article{${citationKey},
  title   = {${post.Title}},
  author  = {${authorFormatted}},
  journal = {${journal}},
  year    = {${year}},
  month   = {${month}},
  url     = {${fullUrl}}
}`;

// Define styles matching Interlinked Content section
const citeThisPageHeaderStyles = `
	#autogenerated-cite-this-page::before {
		content: "#";
		position: absolute;
		color: color-mix(in srgb, var(--color-accent) 50%, transparent);
		margin-left: -1.5rem;
		display: inline-block;
		opacity: 0;
		transition: opacity 0.3s ease;
	}

	#autogenerated-cite-this-page:hover::before {
		opacity: 1;
	}

	#-tocid--autogenerated-cite-this-page,
	#-vistocid--autogenerated-cite-this-page {
		display: block !important;
	}

	#-bottomtocid--autogenerated-cite-this-page {
		display: inline !important;
	}
`;
---

<section class="cite-this-page-section mt-12">
	<hr class="divider bg-accent/30 mx-auto my-4 h-0.5 w-full rounded-sm border-none" />
	<h2
		class="non-toggle-h2 mb-4 cursor-pointer text-2xl font-normal"
		id="autogenerated-cite-this-page"
		onclick="
			var fullUrl = `${window.location.origin}${window.location.pathname}#${id}`;
			navigator.clipboard.writeText(fullUrl);
			window.history.pushState(null, '', fullUrl);
			document.getElementById(`${id}`).scrollIntoView({ behavior: 'smooth' });
		"
	>
		Cite This Page
	</h2>
	<style set:html={citeThisPageHeaderStyles}></style>

	<div class="code group relative z-0 mb-1 w-full max-w-full text-sm">
		<div class="max-h-[340px] min-w-0 overflow-scroll print:max-h-full">
			<div class="flex max-w-full">
				<button
					class="copy absolute top-0 right-0 z-10 cursor-pointer border-none p-2 text-gray-500 sm:opacity-100 md:opacity-0 md:transition-opacity md:duration-200 md:group-hover:opacity-100 print:hidden"
					data-code={bibtexEntry}
					aria-label="copy citation"
					onclick="
						const code = this.getAttribute('data-code');
						navigator.clipboard.writeText(code);
						const svgBefore = this.querySelector('.copy-icon-before');
						const svgAfter = this.querySelector('.copy-icon-done');
						if (svgBefore && svgAfter) {
							svgBefore.classList.toggle('hidden');
							svgAfter.classList.toggle('hidden');
							setTimeout(() => {
								svgBefore.classList.toggle('hidden');
								svgAfter.classList.toggle('hidden');
							}, 1000);
						}
					"
				>
					<Icon
						class="copy-icon-before h-6 w-6"
						name={"clipboard-copy-code"}
						aria-label="copy citation"
					/>
					<Icon
						class="copy-icon-done hidden h-6 w-6"
						name={"clipboard-copy-code-done"}
						aria-label="copied citation"
					/>
				</button>
			</div>
			<pre
				class="overflow-x-auto rounded-sm bg-gray-100 p-4 font-mono text-sm dark:bg-gray-800"><code>{bibtexEntry}</code></pre>
		</div>
	</div>

	<p class="text-textColor/70 mt-2 text-xs">
		Use this BibTeX entry to cite this page in your academic work.
	</p>
</section>
