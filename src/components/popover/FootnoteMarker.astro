---
import type { RichText, Block, Footnote } from "@/lib/interfaces";
import { adjustedFootnotesConfig } from "@/lib/notion/client";
import NotionBlocks from "@/components/NotionBlocks.astro";
import RichTextComponent from "@/components/notion-blocks/RichText.astro";
import { numberToAlphabet } from "@/utils/numbering";

export interface Props {
	richText: RichText;
	block: Block;
}

const { richText, block } = Astro.props;

// Get footnote configuration
const config = adjustedFootnotesConfig?.["in-page-footnotes-settings"];
const displayMode = config?.["intext-display"];

// Determine display mode
const isAlwaysPopup = displayMode?.["always-popup"] === true;
const isMarginMode = displayMode?.["small-popup-large-margin"] === true;

// Get the footnote marker reference (e.g., "ft_a")
const footnoteRef = richText.FootnoteRef;

// Find the corresponding footnote in block.Footnotes
let footnote: Footnote | undefined = undefined;
if (block.Footnotes && footnoteRef) {
	footnote = block.Footnotes.find((fn) => fn.Marker === footnoteRef);
}

// Generate unique ID for this footnote marker
const uniqueId = `footnote-${block.Id}-${footnoteRef}`;

// Determine what symbol to display:
// - Use † ONLY when always-popup is true AND generate-footnotes-section is false
// - Otherwise use sequential numbers [1], [2], etc.
const generateSection = config?.["generate-footnotes-section"];
const useNumbering = generateSection || isMarginMode || !isAlwaysPopup;
const displaySymbol =
	useNumbering && footnote?.Index ? `[${numberToAlphabet(footnote.Index)}]` : "[†]";
---

{/* If no footnote content found, render as muted text (broken reference) */}
{
	!footnote ? (
		<span
			class="footnote-marker-broken text-gray-400 dark:text-gray-600"
			title="Footnote content not found"
		>
			{richText.PlainText}
		</span>
	) : (
		<>
			{/* Render footnote marker with appropriate attributes for popup or margin mode */}
			{isAlwaysPopup ? (
				<span class="text-link decoration-accent-2/40 underline decoration-dotted underline-offset-2">
					<span
						data-popover-target={`popover-description-${uniqueId}`}
						data-popover-placement="bottom-end"
						class="cursor-pointer"
						aria-label="Show information for the linked content"
					>
						{displaySymbol}
					</span>
				</span>
			) : isMarginMode ? (
				<span class="text-link decoration-accent-2/40 underline decoration-dotted underline-offset-2">
					<span
						data-margin-note={uniqueId}
						data-popover-target={`popover-description-${uniqueId}`}
						data-popover-placement="bottom-end"
						class="cursor-pointer"
						aria-label="Show information for the linked content"
					>
						{displaySymbol}
					</span>
				</span>
			) : (
				<span class="text-link decoration-accent-2/40 underline decoration-dotted underline-offset-2">
					<span
						data-popover-target={`popover-description-${uniqueId}`}
						data-popover-placement="bottom-end"
						class="cursor-pointer"
						aria-label="Show information for the linked content"
					>
						{displaySymbol}
					</span>
				</span>
			)}

			{/* Template for popover content */}
			<template id={`template-popover-description-${uniqueId}`}>
				<div
					data-popover
					id={`popover-description-${uniqueId}`}
					role="tooltip"
					class="popoverEl border-accent-2/20 bg-popover-bg/95 text-textColor/80 invisible absolute z-40 hidden inline-block w-72 rounded-lg border text-sm opacity-0 shadow-xs backdrop-blur-sm transition-opacity duration-300"
				>
					<div class="space-y-2 p-3">
						{footnote.Content.Type === "rich_text" && footnote.Content.RichTexts && (
							<div class="footnote-content">
								{footnote.Content.RichTexts.map((rt) => (
									<RichTextComponent richText={rt} blockID={block.Id} block={block} />
								))}
							</div>
						)}
						{footnote.Content.Type === "blocks" && footnote.Content.Blocks && (
							<div class="footnote-content">
								<NotionBlocks
									blocks={footnote.Content.Blocks}
									renderChildren={true}
									setId={false}
								/>
							</div>
						)}
						{footnote.Content.Type === "comment" && footnote.Content.RichTexts && (
							<div class="footnote-content">
								{footnote.Content.RichTexts.map((rt) => (
									<RichTextComponent richText={rt} blockID={block.Id} block={block} />
								))}
								{footnote.Content.CommentAttachments &&
									footnote.Content.CommentAttachments.length > 0 && (
										<div class="mt-2 space-y-1">
											{footnote.Content.CommentAttachments.map(
												(attachment) =>
													attachment.Category === "image" && (
														<img src={attachment.Url} alt="" class="max-w-full rounded" />
													),
											)}
										</div>
									)}
							</div>
						)}
						<span data-popover-link>{""}</span>
					</div>
				</div>
			</template>

			{/* Template for margin notes content (same structure, used by margin notes script) */}
			{isMarginMode && (
				<template id={`template-margin-${uniqueId}`}>
					{/* Add sequential number prefix for margin notes as inline spanerscript */}
					{footnote.Content.Type === "rich_text" && footnote.Content.RichTexts && (
						<span class="!text-sm">
							<span class="text-xxs text-quote font-mono">{displaySymbol}</span>{" "}
							{footnote.Content.RichTexts.map((rt) => (
								<RichTextComponent richText={rt} blockID={block.Id} block={block} />
							))}
						</span>
					)}
					{footnote.Content.Type === "blocks" && footnote.Content.Blocks && (
						<div class="footnote-margin-blocks !text-sm">
							<span class="text-xxs text-quote font-mono">{displaySymbol}</span>{" "}
							<NotionBlocks blocks={footnote.Content.Blocks} renderChildren={true} setId={false} />
						</div>
					)}
					{footnote.Content.Type === "comment" && footnote.Content.RichTexts && (
						<span class="!text-sm">
							<span class="text-xxs text-quote font-mono">{displaySymbol}</span>{" "}
							{footnote.Content.RichTexts.map((rt) => (
								<RichTextComponent richText={rt} blockID={block.Id} block={block} />
							))}
							{footnote.Content.CommentAttachments &&
								footnote.Content.CommentAttachments.length > 0 && (
									<div class="mt-2 space-y-1">
										{footnote.Content.CommentAttachments.map(
											(attachment) =>
												attachment.Category === "image" && (
													<img src={attachment.Url} alt="" class="max-w-full rounded" />
												),
										)}
									</div>
								)}
						</span>
					)}
				</template>
			)}
		</>
	)
}
