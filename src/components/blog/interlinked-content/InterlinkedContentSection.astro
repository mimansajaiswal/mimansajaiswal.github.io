---
import { INTERLINKED_CONTENT, BUILD_FOLDER_PATHS } from "@/constants";
import InternalLinksInThisPage from "@/components/blog/interlinked-content/SiteLinksInThisPage.astro";
import LinksToThisPage from "@/components/blog/interlinked-content/LinksToThisPage.astro";
import ExternalLinksInThisPage from "@/components/blog/interlinked-content/ExternalLinksInThisPage.astro";
import MediaLinksInThisPage from "@/components/blog/interlinked-content/MediaLinksInThisPage.astro";
import type { Post } from "@/lib/interfaces";
import { getInterlinkedContentInPage, getInterlinkedContentToPage } from "@/lib/blog-helpers";
import * as fs from "fs/promises";
import * as path from "path";

interface Props {
	post: Post;
	shouldUseCache: boolean;
}

const { post, shouldUseCache } = Astro.props;
// Load interlinked content data
const allInterlinkedContentToPage = getInterlinkedContentToPage(post.PageId);
const allInterlinkedContentInPage = getInterlinkedContentInPage(post.PageId);

// Filter interlinked content for each component
const filteredExternalNonMediaInterlinkedContent = allInterlinkedContentInPage
	? allInterlinkedContentInPage.filter(
			(ref) => ref.external_hrefs.length > 0 || ref.direct_nonmedia_link,
		)
	: null;
const filteredSitePages = allInterlinkedContentInPage
	? allInterlinkedContentInPage.filter((ref) => ref.other_pages.length > 0 || ref.link_to_pageid)
	: null;
const filteredMediaInterlinkedContent = allInterlinkedContentInPage
	? allInterlinkedContentInPage.filter((ref) => ref.direct_media_link)
	: null;

// Determine if rendering is needed
const rendering =
	INTERLINKED_CONTENT &&
	Object.keys(INTERLINKED_CONTENT).length > 0 &&
	((INTERLINKED_CONTENT["links-to-this-page"] &&
		allInterlinkedContentToPage &&
		Object.keys(allInterlinkedContentToPage).length > 0) ||
		(INTERLINKED_CONTENT["site-links-in-page"] &&
			filteredSitePages &&
			Object.keys(filteredSitePages).length > 0) ||
		(INTERLINKED_CONTENT["external-links-in-page"] &&
			filteredExternalNonMediaInterlinkedContent &&
			Object.keys(filteredExternalNonMediaInterlinkedContent).length > 0) ||
		(INTERLINKED_CONTENT["media-and-file-links-in-this-page"] &&
			filteredMediaInterlinkedContent &&
			Object.keys(filteredMediaInterlinkedContent).length > 0));

// Load cached HTML if shouldUseCache is true
let cachedStaticInterlinkedContentHtml = null;
const staticCachePath = path.join(
	BUILD_FOLDER_PATHS["interlinkedContentHtmlCache"],
	`${post.Slug}-static.html`,
);

if (shouldUseCache) {
	try {
		cachedStaticInterlinkedContentHtml = await fs.readFile(staticCachePath, "utf-8");
	} catch {
		cachedStaticInterlinkedContentHtml = null;
	}
}

// Define styles
const interlinkedContentStyles = `
	h2::before {
		content: "#";
		position: absolute;
		color: color-mix(in srgb, var(--color-accent) 50%, transparent);
		margin-left: -1.5rem;
		display: inline-block;
		opacity: 0;
		transition: opacity 0.3s ease;
	}

	h2:hover::before {
		opacity: 1;
	}

	#-tocid--autogenerated-interlinked-content,
	#-vistocid--autogenerated-interlinked-content {
		display: block !important;
	}

	#-bottomtocid--autogenerated-interlinked-content {
		display: inline !important;
	}
`;
---

<aside data-pagefind-ignore="all" class="print:hidden">
	{
		rendering && (
			<>
				<h2
					class="non-toggle-h2 mt-8 mb-4 cursor-pointer text-2xl font-normal"
					id="autogenerated-interlinked-content"
					onclick="
				var fullUrl = `${window.location.origin}${window.location.pathname}#${id}`;
				navigator.clipboard.writeText(fullUrl);
				window.history.pushState(null, '', fullUrl);
				document.getElementById(`${id}`).scrollIntoView({ behavior: 'smooth' });
			"
				>
					Interlinked Content
				</h2>
				<style set:html={interlinkedContentStyles} />
			</>
		)
	}

	<!-- LinksToThisPage: Render fresh as it depends on external data -->
	{
		INTERLINKED_CONTENT &&
			Object.keys(INTERLINKED_CONTENT).length > 0 &&
			INTERLINKED_CONTENT["links-to-this-page"] &&
			allInterlinkedContentToPage && (
				<LinksToThisPage post={post} allInterlinkedContentToPage={allInterlinkedContentToPage} />
			)
	}

	<!-- Static Interlinked Content: Use cache if available -->
	{
		INTERLINKED_CONTENT &&
			Object.keys(INTERLINKED_CONTENT).length > 0 &&
			(INTERLINKED_CONTENT["site-links-in-page"] ||
				INTERLINKED_CONTENT["media-and-file-links-in-this-page"] ||
				INTERLINKED_CONTENT["external-links-in-page"]) &&
			(filteredSitePages ||
				filteredMediaInterlinkedContent ||
				filteredExternalNonMediaInterlinkedContent) &&
			(cachedStaticInterlinkedContentHtml ? (
				<div class="static-interlinked-content" set:html={cachedStaticInterlinkedContentHtml} />
			) : (
				<div class="static-interlinked-content">
					{INTERLINKED_CONTENT["site-links-in-page"] && filteredSitePages && (
						<InternalLinksInThisPage
							post={post}
							filteredInterlinkedContentInPage={filteredSitePages}
						/>
					)}
					{INTERLINKED_CONTENT["media-and-file-links-in-this-page"] &&
						filteredMediaInterlinkedContent && (
							<MediaLinksInThisPage
								post={post}
								filteredInterlinkedContentInPage={filteredMediaInterlinkedContent}
							/>
						)}
					{INTERLINKED_CONTENT["external-links-in-page"] &&
						filteredExternalNonMediaInterlinkedContent && (
							<ExternalLinksInThisPage
								post={post}
								filteredInterlinkedContentInPage={filteredExternalNonMediaInterlinkedContent}
							/>
						)}
				</div>
			))
	}

	{
		rendering && (
			<hr class="divider bg-accent/30 mx-auto my-4 h-0.5 w-full rounded-sm border-none" />
		)
	}
</aside>
