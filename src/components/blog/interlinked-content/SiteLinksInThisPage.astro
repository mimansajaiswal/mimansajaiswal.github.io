---
import type { Block, Post, InterlinkedContentInPage } from "@/lib/interfaces";
import NBlocksPopover from "@/components/blog/interlinked-content/NBlocksPopover.astro";
import { getInterlinkedContentLink } from "@/lib/blog-helpers";
import NPagePopover from "@/components/blog/interlinked-content/NPagePopover.astro";
import { INTERLINKED_CONTENT } from "@/constants";
import { getSymbolForLinkedContent } from "@/utils";

interface Props {
	post: Post;
	filteredInterlinkedContentInPage: InterlinkedContentInPage[];
}
const { post, filteredInterlinkedContentInPage } = Astro.props;
const groupedInterlinkedContent: { [key: string]: Block[] } =
	filteredInterlinkedContentInPage.reduce((acc, ref) => {
		// Group by direct_nonmedia_link and collect Block objects
		if (ref.link_to_pageid) {
			const key = ref.link_to_pageid;
			acc[key] = acc[key] || [];
			acc[key].push(ref.block);
		}

		// Group by each Href in external_hrefs and collect Block objects
		ref.other_pages.forEach((richText) => {
			if (richText.InternalHref?.PageId) {
				const key = richText.InternalHref.PageId;
				acc[key] = acc[key] || [];
				acc[key].push(ref.block);
			} else if (richText.Mention?.Page?.PageId) {
				const key = richText.Mention.Page.PageId;
				acc[key] = acc[key] || [];
				acc[key].push(ref.block);
			}
		});

		return acc;
	}, {});

const entryIdLinksEntry = {};
const blockIdLinks = {};
const entryIdsToDel: string[] = [];

if (groupedInterlinkedContent) {
	for (const entryId of Object.keys(groupedInterlinkedContent)) {
		const res_entry = await getInterlinkedContentLink(post.PageId, entryId);
		if (!res_entry[1]) {
			entryIdsToDel.push(entryId);
			continue;
		}
		entryIdLinksEntry[entryId] = res_entry;
		for (const block of groupedInterlinkedContent[entryId]) {
			const result = await getInterlinkedContentLink(post.PageId, undefined, block, true);
			blockIdLinks[block.Id] = result[0];
		}
	}
}
entryIdsToDel.forEach((entryId) => {
	delete groupedInterlinkedContent[entryId];
});
---

{
	groupedInterlinkedContent && Object.keys(groupedInterlinkedContent).length > 0 && (
		<>
			<div id="autogenerated-site-links">
				<span class="font-semibold">Other Pages Mentioned On This Page</span>
				{Object.entries(groupedInterlinkedContent).map(([entryId, blocks]) => (
					<div class="ml-2">
						<div class="inline-block">
							<NPagePopover
								linkedTo={entryIdLinksEntry[entryId][0]}
								popoverSpanText={entryIdLinksEntry[entryId][1].Title}
								popoverTitle={entryIdLinksEntry[entryId][1].Title}
								postId={entryId}
								excerpt={entryIdLinksEntry[entryId][1].Excerpt}
							/>
							{" at "}
							{blocks.map((block, index) => (
								<NBlocksPopover
									block={block}
									linkedTo={blockIdLinks[block.Id]}
									popoverSpanText={`[${getSymbolForLinkedContent(index)}]`}
									isInterlinkedBack={true}
									linkText="Jump to"
								/>
							))}
						</div>
					</div>
				))}
			</div>
			<br />
		</>
	)
}
