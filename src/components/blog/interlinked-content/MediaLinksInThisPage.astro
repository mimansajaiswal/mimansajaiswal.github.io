---
import type { Block, Post, InterlinkedContentInPage } from "@/lib/interfaces";
import NBlocksPopover from "@/components/blog/interlinked-content/NBlocksPopover.astro";
import { getInterlinkedContentLink } from "@/lib/blog-helpers";
import { INTERLINKED_CONTENT } from "@/constants";
import { getSymbolForLinkedContent } from "@/lib/style-helpers";

interface Props {
	post: Post;
	filteredInterlinkedContentInPage: InterlinkedContentInPage[];
}
const { post, filteredInterlinkedContentInPage } = Astro.props;

const groupedInterlinkedContent: { [key: string]: { block: Block; dml: string }[] } =
	filteredInterlinkedContentInPage.reduce((acc, ref) => {
		// Group by direct_nonmedia_link and collect Block objects
		if (ref.direct_media_link) {
			// const key = ref.direct_media_link;
			let key = null;
			key = ref.block.Video
				? "Videos"
				: ref.block.NImage
					? "Images"
					: ref.block.NAudio
						? "Audio"
						: "Files";
			acc[key] = acc[key] || [];
			acc[key].push({ block: ref.block, dml: ref.direct_media_link });
		}
		return acc;
	}, {});

const blockIdLinks = {};
if (groupedInterlinkedContent) {
	for (const dmltype of Object.keys(groupedInterlinkedContent)) {
		for (const blockdml of groupedInterlinkedContent[dmltype]) {
			const result = await getInterlinkedContentLink(post.PageId, undefined, blockdml.block, true);
			blockIdLinks[blockdml.block.Id] = result[0];
		}
	}
}

// console.log(groupedInterlinkedContent);
---

{
	groupedInterlinkedContent && Object.keys(groupedInterlinkedContent).length > 0 && (
		<>
			<div id="autogenerated-media-links" class="no-rss">
				<span class="font-semibold">Media & Files On This Page</span>
				{Object.entries(groupedInterlinkedContent).map(([dmltype, blockdmls]) => (
					<div class="ml-2">
						<div class="inline-block">
							{INTERLINKED_CONTENT && Object.keys(INTERLINKED_CONTENT).length > 0 && INTERLINKED_CONTENT["popovers"] ? (
								<>
									<span class="italic">{dmltype}</span> {" at "}
									{blockdmls.map((blockdml, index) => (
										<>
											<NBlocksPopover
												block={blockdml.block}
												linkedTo={blockIdLinks[blockdml.block.Id]}
												popoverSpanText={`[${getSymbolForLinkedContent(index)}]`}
												isInterlinkedBack={true}
												linkText="Jump to"
											/>
										</>
									))}
								</>
							) : (
								<>
									<span class="italic">{dmltype}</span> {" at "}
									{blockdmls.map((blockdml, index) => (
										<a href={blockIdLinks[blockdml.block.Id]} class="text-link font-mono text-xs">
											{`[${getSymbolForLinkedContent(index)}]`}
										</a>
									))}
								</>
							)}
						</div>
					</div>
				))}
			</div>
			<br />
		</>
	)
}
