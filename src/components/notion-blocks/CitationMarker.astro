---
import type { RichText, Block, Citation } from "@/lib/interfaces";
import { BIBLIOGRAPHY_STYLE, CITATIONS } from "@/constants";

export interface Props {
	richText: RichText;
	blockID: string;
	block: Block;
}

const { richText, blockID, block } = Astro.props;

// Get the citation key reference (e.g., "smith2020")
const citationRef = richText.CitationRef;

// Find the corresponding citation in block.Citations
let citation: Citation | undefined = undefined;
if (block.Citations && citationRef) {
	citation = block.Citations.find((c) => c.Key === citationRef);
}

// Generate unique ID for this citation marker
const uniqueId = `citation-${block.Id}-${citationRef}`;

// Determine what to display:
// - IEEE: [1], [2], etc. (using Index)
// - APA: (Author et al, Year)
const bibliographyStyle = BIBLIOGRAPHY_STYLE || "simplified-ieee";
let displayText = "";

if (citation) {
	if (bibliographyStyle === "simplified-ieee" && citation.Index) {
		// IEEE: Show numbers
		displayText = `[${citation.Index}]`;
	} else {
		// APA style: Show author/year
		displayText = `(${citation.Authors}, ${citation.Year})`;
	}
} else {
	displayText = `[?]`;
}

// Check if bibliography section is being generated
const showBibliography =
	CITATIONS?.["extract-and-process-bibtex-citations"]?.["generate-bibliography-section"] === true;
---

{/* If no citation content found, render as muted text (broken reference) */}
{
	!citation ? (
		<span
			class="citation-marker-broken text-gray-400 dark:text-gray-600"
			title="Citation not found"
		>
			{richText.PlainText}
		</span>
	) : (
		<>
			{/* Render citation marker with popup on click */}
			<span class="citation-marker">
				<span
					data-citation-id={uniqueId}
					data-popover-target={`popover-${uniqueId}`}
					data-popover-placement="bottom-start"
					class="text-quote cursor-pointer font-mono text-xs"
					aria-label={`Show citation ${displayText}`}
					role="button"
					tabindex="0"
				>
					{displayText}
				</span>
			</span>

			{/* Template for popover content */}
			<template id={`template-popover-${uniqueId}`}>
				<div
					data-popover
					id={`popover-${uniqueId}`}
					data-source-block-id={blockID}
					data-citation-key={citation.Key}
					role="tooltip"
					class="popoverEl border-accent-2/20 bg-popover-bg/95 text-textColor/80 invisible absolute z-40 hidden inline-block w-72 rounded-lg border text-sm opacity-0 shadow-xs backdrop-blur-sm transition-opacity duration-300"
				>
					<div class="space-y-2 p-3">
						<div class="citation-content" set:html={citation.FormattedEntry} />
						{showBibliography && (
							<div class="border-accent-2/20 mt-2 border-t pt-2">
								<a
									href={`#citation-def-${citation.Key}`}
									data-popover-link
									class="text-quote hover:text-quote/80 flex items-center gap-1 text-xs transition-colors"
									onclick={`
										event.preventDefault();

										// Clear any previously active back buttons
										document.querySelectorAll('li[data-show-back-button]').forEach(li => {
											delete li.dataset.showBackButton;
											delete li.dataset.backToBlock;
										});

										// Set active on target
										const target = document.getElementById('citation-def-${citation.Key}');
										if (target) {
											target.dataset.showBackButton = 'true';
											target.dataset.backToBlock = '${blockID}';
										}

										window.location.hash = '#citation-def-${citation.Key}';
										target?.scrollIntoView({ behavior: 'smooth' });
									`}
								>
									<span>Jump to bibliography</span>
									<span aria-hidden="true">â†“</span>
								</a>
							</div>
						)}
						<span data-popover-link>{""}</span>
					</div>
				</div>
			</template>
		</>
	)
}
